{
	"name": "when-in-rome",
	"displayName": "When In Rome",
	"description": "Enforce team coding standards seamlessly, reduce review cycles, and elevate code quality effortlessly. After all, when in rome you should code as the Romans do.",
	"author": "Tristan Deane",
	"version": "0.0.25",
	"publisher": "alchemized",
	"homepage": "https://www.rome.dev",
	"preview": true,
	"icon": "assets/images/logo-v1.png",
	"galleryBanner": {
		"color": "#20232D",
		"theme": "dark"
	},
	"license": "SEE LICENSE IN README.md",
	"pricing": "Trial",
	"categories": [
		"Programming Languages",
		"Linters",
		"Other",
		"Data Science",
		"Machine Learning",
		"Education"
	],
	"keywords": [
		"AI",
		"code quality",
		"coding conventions",
		"quick fix",
		"static analysis"
	],
	"engines": {
		"vscode": "^1.75.0",
		"node": ">=18"
	},
	"main": "./client/out/extension",
	"contributes": {
		"commands": [
			{
				"command": "whenInRome.signIn",
				"title": "When In Rome: Sign In"
			},
			{
				"command": "whenInRome.signOut",
				"title": "When In Rome: Sign Out"
			},
			{
				"command": "whenInRome.renameSymbol",
				"title": "Rename Symbol (When In Rome)"
			  }
		],
		"menus": {
			"editor/context": [
			  {
				"command": "whenInRome.renameSymbol",
				"when": "editorTextFocus && !editorReadonly",
				"group": "navigation"
			  }
			]
		},
		"languages": [
			{
			  "id": "javascript",
			  "aliases": ["JavaScript", "js"],
			  "extensions": [".js"],
			  "configuration": "./language-configuration.json"
			},
			{
			  "id": "typescript",
			  "aliases": ["TypeScript", "ts"],
			  "extensions": [".ts"],
			  "configuration": "./language-configuration.json"
			},
			{
			  "id": "python",
			  "aliases": ["Python", "py"],
			  "extensions": [".py"],
			  "configuration": "./language-configuration.json"
			}
		  ],
		"configuration": {
			"title": "When In Rome",
			"properties": {
				"whenInRome.general.onlyCheckNewCode": {
					"type": "boolean",
					"default": false,
					"description": "Check only new or modified code.",
					"order": 1
				},
				"whenInRome.general.isDevMode": {
					"type": "boolean",
					"default": false,
					"description": "Toggle development mode for additional logging and diagnostics.",
					"order": 2
				},
				"whenInRome.general.notificationInterval": {
					"type": "number",
					"default": 45,
					"description": "Interval in minutes to control the frequency of notifications.",
					"order": 3
				},
				"whenInRome.general.prefixes": {
					"type": "array",
					"default": [
						"is",
						"has",
						"should",
						"can",
						"did"
					],
					"items": {
						"type": "string"
					},
					"description": "Prefixes to use for boolean variables.",
					"order": 4
				},
				"whenInRome.comments.flagRedundant": {
					"type": "boolean",
					"default": true,
					"description": "Enable to identify and flag comments that are unnecessary because the code is self-explanatory. To bypass this check for specific comments, include '@rome-ignore', 'TODO', or 'FIXME' in the comment text.",
					"order": 5
				},
				"whenInRome.languages.javascript.isEnabled": {
					"type": "boolean",
					"default": true,
					"description": "Enable/disable features specifically.",
					"order": 6
				},
				"whenInRome.languages.javascript.expressiveNames.variables.isEnabled": {
					"type": "boolean",
					"default": true,
					"description": "Enforce expressive variable names.",
					"order": 7
				},
				"whenInRome.languages.javascript.expressiveNames.variables.avoidShortNames": {
					"type": "boolean",
					"default": true,
					"description": "Avoid using short variable names.",
					"order": 8
				},
				"whenInRome.languages.javascript.expressiveNames.variables.avoidGenericNames": {
					"type": "boolean",
					"default": true,
					"description": "Avoid using generic variable names.",
					"order": 9
				},
				"whenInRome.languages.javascript.expressiveNames.functions.isEnabled": {
					"type": "boolean",
					"default": true,
					"description": "Enforce expressive function names.",
					"order": 10
				},
				"whenInRome.languages.javascript.expressiveNames.functions.avoidShortNames": {
					"type": "boolean",
					"default": true,
					"description": "Avoid using short function names.",
					"order": 11
				},
				"whenInRome.languages.javascript.expressiveNames.functions.avoidGenericNames": {
					"type": "boolean",
					"default": true,
					"description": "Avoid using generic function names.",
					"order": 12
				},
				"whenInRome.languages.javascript.expressiveNames.functions.functionLengthLimit": {
					"type": "number",
					"default": 60,
					"description": "Set the maximum length for functions.",
					"order": 13
				},
				"whenInRome.languages.javascript.expressiveNames.functions.maxCyclomaticComplexity": {
					"type": "number",
					"default": 10,
					"description": "Set the maximum cyclomatic complexity for functions.",
					"order": 14
				},
				"whenInRome.languages.javascript.boolean.positiveNaming": {
					"type": "boolean",
					"default": true,
					"description": "Enforce positive naming conventions.",
					"order": 15
				},
				"whenInRome.languages.javascript.boolean.usePrefix": {
					"type": "boolean",
					"default": true,
					"description": "Enforce boolean variable prefixes.",
					"order": 16
				},
				"whenInRome.languages.typescript.isEnabled": {
					"type": "boolean",
					"default": true,
					"description": "Enable/disable features specifically.",
					"order": 17
				},
				"whenInRome.languages.typescript.expressiveNames.variables.isEnabled": {
					"type": "boolean",
					"default": true,
					"description": "Enforce expressive variable names.",
					"order": 18
				},
				"whenInRome.languages.typescript.expressiveNames.variables.avoidShortNames": {
					"type": "boolean",
					"default": true,
					"description": "Avoid using short variable names.",
					"order": 19
				},
				"whenInRome.languages.typescript.expressiveNames.variables.avoidGenericNames": {
					"type": "boolean",
					"default": true,
					"description": "Avoid using generic variable names.",
					"order": 20
				},
				"whenInRome.languages.typescript.expressiveNames.functions.isEnabled": {
					"type": "boolean",
					"default": true,
					"description": "Enforce expressive function names.",
					"order": 21
				},
				"whenInRome.languages.typescript.expressiveNames.functions.avoidShortNames": {
					"type": "boolean",
					"default": true,
					"description": "Avoid using short function names.",
					"order": 22
				},
				"whenInRome.languages.typescript.expressiveNames.functions.avoidGenericNames": {
					"type": "boolean",
					"default": true,
					"description": "Avoid using generic function names.",
					"order": 23
				},
				"whenInRome.languages.typescript.expressiveNames.functions.functionLengthLimit": {
					"type": "number",
					"default": 60,
					"description": "Set the maximum length for functions.",
					"order": 24
				},
				"whenInRome.languages.typescript.expressiveNames.functions.maxCyclomaticComplexity": {
					"type": "number",
					"default": 10,
					"description": "Set the maximum cyclomatic complexity for functions.",
					"order": 25
				},
				"whenInRome.languages.typescript.boolean.positiveNaming": {
					"type": "boolean",
					"default": true,
					"description": "Enforce positive naming conventions.",
					"order": 26
				},
				"whenInRome.languages.typescript.boolean.usePrefix": {
					"type": "boolean",
					"default": true,
					"description": "Enforce boolean variable prefixes.",
					"order": 27
				},
				"whenInRome.languages.python.isEnabled": {
					"type": "boolean",
					"default": true,
					"description": "Enable/disable features specifically.",
					"order": 28
				},
				"whenInRome.languages.python.expressiveNames.variables.isEnabled": {
					"type": "boolean",
					"default": true,
					"description": "Enforce expressive variable names.",
					"order": 29
				},
				"whenInRome.languages.python.expressiveNames.variables.avoidShortNames": {
					"type": "boolean",
					"default": true,
					"description": "Avoid using short variable names.",
					"order": 30
				},
				"whenInRome.languages.python.expressiveNames.variables.avoidGenericNames": {
					"type": "boolean",
					"default": true,
					"description": "Avoid using generic variable names.",
					"order": 31
				},
				"whenInRome.languages.python.expressiveNames.functions.isEnabled": {
					"type": "boolean",
					"default": true,
					"description": "Enforce expressive function names.",
					"order": 32
				},
				"whenInRome.languages.python.expressiveNames.functions.avoidShortNames": {
					"type": "boolean",
					"default": true,
					"description": "Avoid using short function names.",
					"order": 33
				},
				"whenInRome.languages.python.expressiveNames.functions.avoidGenericNames": {
					"type": "boolean",
					"default": true,
					"description": "Avoid using generic function names.",
					"order": 34
				},
				"whenInRome.languages.python.expressiveNames.functions.functionLengthLimit": {
					"type": "number",
					"default": 60,
					"description": "Set the maximum length for functions.",
					"order": 35
				},
				"whenInRome.languages.python.expressiveNames.functions.maxCyclomaticComplexity": {
					"type": "number",
					"default": 10,
					"description": "Set the maximum cyclomatic complexity for functions.",
					"order": 36
				},
				"whenInRome.languages.python.boolean.positiveNaming": {
					"type": "boolean",
					"default": true,
					"description": "Enforce positive naming conventions.",
					"order": 37
				},
				"whenInRome.languages.python.boolean.usePrefix": {
					"type": "boolean",
					"default": true,
					"description": "Enforce boolean variable prefixes.",
					"order": 38
				},
				"whenInRome.languages.python.expressiveNames.variables.examples": {
					"type": "array",
					"default": [],
					"items": {
						"type": "string"
					},
					"description": "Examples of Python variable naming conventions",
					"order": 40
				},
				"whenInRome.languages.python.expressiveNames.functions.examples": {
					"type": "array",
					"default": [],
					"items": {
						"type": "string"
					},
					"description": "Examples of Python function naming conventions",
					"order": 41
				},
				"whenInRome.languages.javascript.expressiveNames.variables.examples": {
					"type": "array",
					"default": [],
					"items": {
						"type": "string"
					},
					"description": "Examples of JavaScript variable naming conventions",
					"order": 42
				},
				"whenInRome.languages.javascript.expressiveNames.functions.examples": {
					"type": "array",
					"default": [],
					"items": {
						"type": "string"
					},
					"description": "Examples of JavaScript function naming conventions",
					"order": 43
				},
				"whenInRome.languages.typescript.expressiveNames.variables.examples": {
					"type": "array",
					"default": [],
					"items": {
						"type": "string"
					},
					"description": "Examples of TypeScript variable naming conventions",
					"order": 42
				},
				"whenInRome.languages.typescript.expressiveNames.functions.examples": {
					"type": "array",
					"default": [],
					"items": {
						"type": "string"
					},
					"description": "Examples of TypeScript function naming conventions",
					"order": 43
				}
			}
		}
	},
	"scripts": {
		"vscode:prepublish": "NODE_ENV=production tsc -b",
		"clean": "rimraf ./client/out ./server/out",
		"compile": "tsc -b",
		"package": "vsce package",
		"dev:package": "npm run package --pre-release",
		"publish": "vsce publish --allow-missing-repository",
		"dev-publish": "npm run dev:package && code --install-extension when-in-rome-0.0.25.vsix",
		"watch": "tsc -b -w",
		"lint": "eslint ./client/src ./server/src --ext .ts,.tsx",
		"postinstall": "cd client && npm install && cd ../server && npm install && cd ..",
		"test": "sh ./scripts/e2e.sh"
	},
	"devDependencies": {
		"@types/mocha": "^10.0.6",
		"@types/node": "^18.14.6",
		"@typescript-eslint/eslint-plugin": "^7.1.0",
		"@typescript-eslint/parser": "^7.1.0",
		"eslint": "^8.57.0",
		"mocha": "^10.3.0",
		"typescript": "^5.3.3"
	}
}
