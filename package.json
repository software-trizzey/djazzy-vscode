{
	"name": "when-in-rome",
	"displayName": "When in Rome",
	"description": "AI-Driven Code Stylist that enforces team conventions. After all, when in rome you should do as the Romans do.",
	"author": "Tristan Deane",
	"version": "0.0.4",
	"publisher": "alchemized",
	"license": "SEE LICENSE IN LICENSE.md",
	"repository": "https://github.com/software-trizzey/when-in-rome-lsp",
	"pricing": "Trial",
	"categories": [
		"Programming Languages",
		"Linters",
		"Other"
	],
	"keywords": [
		"code-stylist copilot rome conventions code-quality"
	],
	"engines": {
		"vscode": "^1.75.0",
		"node": ">=18"
	},
	"activationEvents": [
		"onLanguage:python",
		"onLanguage:javascript",
		"onLanguage:typescript"
	],
	"main": "./client/out/extension",
	"contributes": {
		"configuration": {
			"title": "When in Rome",
			"properties": {
				"whenInRome.enabled": {
					"type": "boolean",
					"default": true,
					"description": "Enable or disable the When in Rome extension globally."
				},
				"whenInRome.onlyCheckNewCode": {
					"type": "boolean",
					"default": false,
					"description": "Check only new or modified code."
				},
				"whenInRome.devMode": {
					"type": "boolean",
					"default": false,
					"description": "Toggle development mode for additional logging and diagnostics."
				},
				"whenInRome.notificationInterval": {
					"type": "number",
					"default": 45,
					"description": "Interval in minutes to control the frequency of notifications."
				},
				"whenInRome.comments.flagRedundant": {
					"type": "boolean",
					"default": true,
					"description": "Enable to identify and flag comments that are unnecessary because the code is self-explanatory. To bypass this check for specific comments, include '@rome-ignore', 'TODO', or 'FIXME' in the comment text."
				},
				"whenInRome.languages.javascript.enabled": {
					"type": "boolean",
					"default": true,
					"description": "Enable/disable features specifically."
				},
				"whenInRome.languages.javascript.expressiveNames": {
					"type": "boolean",
					"default": true,
					"description": "Enforce expressive variable names."
				},
				"whenInRome.languages.javascript.avoidAbbreviations": {
					"type": "boolean",
					"default": true,
					"description": "Avoid using abbreviations in variable names."
				},
				"whenInRome.languages.javascript.boolean.positiveNaming": {
					"type": "boolean",
					"default": true,
					"description": "Enforce positive naming conventions."
				},
				"whenInRome.languages.javascript.boolean.usePrefix": {
					"type": "boolean",
					"default": true,
					"description": "Enforce boolean variable prefixes."
				},
				"whenInRome.languages.typescript.enabled": {
					"type": "boolean",
					"default": true,
					"description": "Enable/disable features specifically."
				},
				"whenInRome.languages.typescript.expressiveNames": {
					"type": "boolean",
					"default": true,
					"description": "Enforce expressive variable names."
				},
				"whenInRome.languages.typescript.avoidAbbreviations": {
					"type": "boolean",
					"default": true,
					"description": "Avoid using abbreviations in variable names."
				},
				"whenInRome.languages.typescript.boolean.positiveNaming": {
					"type": "boolean",
					"default": true,
					"description": "Enforce positive naming conventions."
				},
				"whenInRome.languages.typescript.boolean.usePrefix": {
					"type": "boolean",
					"default": true,
					"description": "Enforce boolean variable prefixes."
				},
				"whenInRome.languages.python.enabled": {
					"type": "boolean",
					"default": true,
					"description": "Enable/disable features specifically."
				},
				"whenInRome.languages.python.expressiveNames": {
					"type": "boolean",
					"default": true,
					"description": "Enforce expressive variable names."
				},
				"whenInRome.languages.python.avoidAbbreviations": {
					"type": "boolean",
					"default": true,
					"description": "Avoid using abbreviations in variable names."
				},
				"whenInRome.languages.python.boolean.positiveNaming": {
					"type": "boolean",
					"default": true,
					"description": "Enforce positive naming conventions."
				},
				"whenInRome.languages.python.boolean.usePrefix": {
					"type": "boolean",
					"default": true,
					"description": "Enforce boolean variable prefixes."
				},
				"whenInRome.languages.prefixes": {
					"type": "array",
					"default": [
						"is",
						"has",
						"should",
						"can",
						"did"
					],
					"items": {
						"type": "string"
					},
					"description": "Prefixes to use for boolean variables."
				}
			}
		}
	},
	"scripts": {
		"vscode:prepublish": "NODE_ENV=production tsc -b",
		"clean": "rimraf ./client/out ./server/out",
		"compile": "tsc -b",
		"package": "vsce package",
		"dev:package": "npm run package --pre-release",
		"publish": "vsce publish",
		"dev-publish": "npm run dev:package && code --install-extension when-in-rome-0.0.4.vsix",
		"watch": "tsc -b -w",
		"lint": "eslint ./client/src ./server/src --ext .ts,.tsx",
		"postinstall": "cd client && npm install && cd ../server && npm install && cd ..",
		"test": "sh ./scripts/e2e.sh"
	},
	"devDependencies": {
		"@types/mocha": "^10.0.6",
		"@types/node": "^18.14.6",
		"@typescript-eslint/eslint-plugin": "^7.1.0",
		"@typescript-eslint/parser": "^7.1.0",
		"eslint": "^8.57.0",
		"mocha": "^10.3.0",
		"typescript": "^5.3.3"
	}
}
