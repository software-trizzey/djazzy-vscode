{
	"name": "djangoly",
	"displayName": "Djangoly",
	"description": "Enforce team coding standards seamlessly, reduce review cycles, and elevate code quality effortlessly.",
	"author": "Tristan Deane",
	"version": "0.1.2",
	"publisher": "alchemized",
	"homepage": "",
	"preview": true,
	"icon": "assets/images/logo-v1.png",
	"galleryBanner": {
		"color": "#20232D",
		"theme": "dark"
	},
	"license": "SEE LICENSE IN README.md",
	"pricing": "Trial",
	"categories": [
		"Programming Languages",
		"Linters",
		"Other",
		"Data Science",
		"Machine Learning",
		"Education"
	],
	"keywords": [
		"AI",
		"code quality",
		"coding conventions",
		"quick fix",
		"static analysis"
	],
	"engines": {
		"vscode": "^1.75.0",
		"node": ">=18"
	},
	"main": "./client/out/extension",
	"contributes": {
		"activationEvents": [
			"onCommand:djangoly.signIn",
			"onCommand:djangoly.addCustomRule",
			"onCommand:djangoly.openWalkthrough"
		],
		"commands": [
			{
				"command": "djangoly.signIn",
				"title": "Djangoly: Sign In"
			},
			{
				"command": "djangoly.signOut",
				"title": "Djangoly: Sign Out"
			},
			{
				"command": "djangoly.openSettings",
				"title": "Djangoly: Open Settings"
			}
		],
		"walkthroughs": [
			{
				"id": "djangoly.gettingStarted",
				"title": "Getting Started with Djangoly",
				"description": "Learn how to use the key features of Djangoly.",
				"steps": [
				{
					"id": "djangoly.installExtension",
					"title": "Install the Extension",
					"description": "Open VS Code, go to the Extensions view, and search for 'Djangoly'. Click 'Install' and wait for the installation to complete.",
					"media": {
					"image": "assets/images/walkthrough/install.png",
					"altText": "Install Djangoly"
					}
				},
				{
					"id": "djangoly.signIn",
					"title": "Sign In with GitHub",
					"description": "Open command palette and type in â†’ ```Djangoly: Sign In```. Or press the button below: \n[Sign In](command:djangoly.signIn)\nAccept the notification and you should be signed in via your GitHub account.",
					"media": {
						"image": "assets/images/walkthrough/signIn.png",
						"altText": "Sign In"
					},
					"completionEvents": ["onCommand:djangoly.signIn"]
				},
				{
					"id": "djangoly.untestedCode",
					"title": "Untested API Code Detection",
					"description": "Introduce a new piece of business logic without a test. Notice that Djangoly reminds you to test the changes.",
					"media": {
						"image": "assets/gifs/flag-untested-api-code.gif",
						"altText": "Untested Code Demo"
					}
				},
				{
					"id": "djangoly.setupRules",
					"title": "Setup Naming and Testing Rules",
					"description": "Customize naming conventions and test requirements for your workspace.\n[Customize Rules](command:djangoly.openSettings)\n\n[Import Conventions](command:djangoly.addCustomRule)",
					"media": {
					  "image": "assets/images/walkthrough/settings.png",
					  "altText": "Setup Rules"
					}
				  }
				]
			}
		],
		"languages": [
			{
			  "id": "python",
			  "aliases": ["Python", "py"],
			  "extensions": [".py"],
			  "configuration": "./language-configuration.json"
			}
		],
		"configuration": {
			"title": "Djangoly",
			"properties": {
				"djangoly.general.onlyCheckNewCode": {
					"type": "boolean",
					"default": false,
					"description": "Check only new or modified code.",
					"order": 1
				},
				"djangoly.general.nPlusOneMinimumSeverityThreshold": {
					"type": "string",
					"default": "WARNING",
					"description": "Set the minimum severity threshold for N+1 query detection.",
					"enum": [
						"ERROR",
						"WARNING",
						"INFORMATION",
						"HINT"
					],
					"order": 2
				},
				"djangoly.general.isDevMode": {
					"type": "boolean",
					"default": false,
					"description": "Toggle development mode for additional logging and diagnostics.",
					"order": 3
				},
				"djangoly.general.notificationInterval": {
					"type": "number",
					"default": 45,
					"description": "Interval in minutes to control the frequency of notifications.",
					"order": 4
				},
				"djangoly.general.prefixes": {
					"type": "array",
					"default": [
						"is",
						"has",
						"should",
						"can",
						"did"
					],
					"items": {
						"type": "string"
					},
					"description": "Prefixes to use for boolean variables.",
					"order": 5
				},
				"djangoly.comments.flagRedundant": {
					"type": "boolean",
					"default": true,
					"description": "Enable to identify and flag comments that are unnecessary because the code is self-explanatory. To bypass this check for specific comments, include 'djangoly-ignore', 'TODO', or 'FIXME' in the comment text.",
					"order": 6
				},
				"djangoly.languages.python.isEnabled": {
					"type": "boolean",
					"default": true,
					"description": "Enable/disable features specifically.",
					"order": 7
				},
				"djangoly.languages.python.expressiveNames.variables.isEnabled": {
					"type": "boolean",
					"default": true,
					"description": "Enforce expressive variable names.",
					"order": 8
				},
				"djangoly.languages.python.expressiveNames.variables.avoidShortNames": {
					"type": "boolean",
					"default": true,
					"description": "Avoid using short variable names.",
					"order": 9
				},
				"djangoly.languages.python.expressiveNames.variables.avoidGenericNames": {
					"type": "boolean",
					"default": true,
					"description": "Avoid using generic variable names.",
					"order": 10
				},
				"djangoly.languages.python.expressiveNames.functions.isEnabled": {
					"type": "boolean",
					"default": true,
					"description": "Enforce expressive function names.",
					"order": 11
				},
				"djangoly.languages.python.expressiveNames.functions.avoidShortNames": {
					"type": "boolean",
					"default": true,
					"description": "Avoid using short function names.",
					"order": 12
				},
				"djangoly.languages.python.expressiveNames.functions.avoidGenericNames": {
					"type": "boolean",
					"default": true,
					"description": "Avoid using generic function names.",
					"order": 13
				},
				"djangoly.languages.python.expressiveNames.functions.functionLengthLimit": {
					"type": "number",
					"default": 60,
					"description": "Set the maximum length for functions.",
					"order": 14
				},
				"djangoly.languages.python.expressiveNames.objectProperties.isEnabled": {
					"type": "boolean",
					"default": true,
					"description": "Enforce expressive object property names.",
					"order": 15
				},
				"djangoly.languages.python.expressiveNames.objectProperties.avoidShortNames": {
					"type": "boolean",
					"default": true,
					"description": "Avoid using short object property names.",
					"order": 16
				},
				"djangoly.languages.python.expressiveNames.objectProperties.avoidGenericNames": {
					"type": "boolean",
					"default": true,
					"description": "Avoid using generic object property names.",
					"order": 17
				},
				"djangoly.languages.python.boolean.positiveNaming": {
					"type": "boolean",
					"default": true,
					"description": "Enforce positive naming conventions.",
					"order": 18
				},
				"djangoly.languages.python.boolean.usePrefix": {
					"type": "boolean",
					"default": true,
					"description": "Enforce boolean variable prefixes.",
					"order": 19
				},
				"djangoly.languages.python.expressiveNames.variables.examples": {
					"type": "array",
					"default": [],
					"items": {
						"type": "string"
					},
					"description": "Examples of Python variable naming conventions",
					"order": 20
				},
				"djangoly.languages.python.expressiveNames.functions.examples": {
					"type": "array",
					"default": [],
					"items": {
						"type": "string"
					},
					"description": "Examples of Python function naming conventions",
					"order": 21
				},
				"djangoly.languages.python.expressiveNames.objectProperties.examples": {
					"type": "array",
					"default": [],
					"items": {
						"type": "string"
					},
					"description": "Examples of Python dictionary key naming conventions",
					"order": 22
				},
				"djangoly.languages.python.celeryTaskDecorator": {
					"type": "object",
					"default": {
						"requiredDecorators": [],
						"requiredCalls": []
					},
					"description": "Celery task functions should have the newrelic background_task decorator and call set_custom_newrelic_log.",
					"order": 23
				}
			}
		}
	},
	"scripts": {
		"vscode:prepublish": "NODE_ENV=production tsc -b",
		"clean": "rimraf ./client/out ./server/out",
		"compile": "tsc -b",
		"package": "vsce package",
		"dev:package": "npm run package --pre-release",
		"publish": "vsce publish --allow-missing-repository",
		"dev-publish": "npm run dev:package && code --install-extension djangoly-0.1.2.vsix",
		"watch": "tsc -b -w",
		"lint": "eslint ./client/src ./server/src --ext .ts,.tsx",
		"postinstall": "cd client && npm install && cd ../server && npm install && cd ..",
		"test": "sh ./scripts/e2e.sh"
	},
	"devDependencies": {
		"@types/mocha": "^10.0.6",
		"@types/node": "^18.14.6",
		"@typescript-eslint/eslint-plugin": "^7.1.0",
		"@typescript-eslint/parser": "^7.1.0",
		"eslint": "^8.57.0",
		"mocha": "^10.3.0",
		"typescript": "^5.3.3"
	}
}
